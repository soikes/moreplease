package components

import (
	"fmt"
	"soikke.li/moreplease/pkg/db"
	"soikke.li/moreplease/pkg/model"
)

type Example struct {
	Language   model.Language
	Statements db.Statements
}

templ (e *Example) Run(path string) {
	<div class="example sticky-container fade-in">
		<div class="tile sticky">
			{{
				var xdata string
				stmt := e.Statements.From(path)
				schema := e.Statements.From(e.Statements.SchemaPath)
				// result := e.Statements.ExecFile(path) // TODO: CREATE TABLE statements in multi-statement files are not working.
				xdata = fmt.Sprintf("createExample(`%s`, `%s`, `%s`)", schema, stmt, "")
			}}
			<div x-data={ xdata }>
				<div class="stmt">
					<textarea
						spellcheck="false"
						autocorrect="off"
						autocapitalize="off"
						x-init="$watch('stmt', () => { $el.parentNode.dataset.replicatedValue = $el.value })"
						x-model="stmt"
					></textarea>
					<pre>
						<code
							class={ e.Language.CSSClass() }
							x-init="$watch('stmt', () => {
                                $nextTick(() => Prism.highlightElement($el))
                            })"
							x-text="stmt"
						></code>
					</pre>
				</div>
				<button class="run" x-on:click="run"><img src="assets/run.svg"/> run</button>
				<button class="run" x-on:click="reset"><img src="assets/reset.svg"/> reset</button>
				<div class="result" x-text="result"></div>
			</div>
		</div>
	</div>
}

templ (e *Example) Display(path string) {
	<div class="sticky-container">
		<div class="tile sticky">
			{{
				stmt := e.Statements.From(path)
			}}
			<pre>
				<code class={ e.Language.CSSClass() } x-text="stmt" x-ref="codeBlock">{ stmt }</code>
			</pre>
		</div>
	</div>
}
