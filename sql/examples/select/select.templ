package select_query

import "embed"
import "fmt"
import "soikke.li/moreplease/templates"
import "soikke.li/moreplease/sql/highlight"
import "soikke.li/moreplease/sql/db"

//go:embed sql/*.sql
var sources embed.FS

//TODO: Change rendering to use classes so we don't flood the page with inline styles.
templ Example() {
    @templates.Base("More SQL Please: SELECT") {
        <div class="content wide">
            <div class="title">
                <h1>More SQL Please: SELECT</h1>
            </div>
            <details class="toggle">
                <summary class="action" data-open="hide tables" data-close="show tables"></summary>
                <div class="container">
                    <div>
                        <div class="tablename">users</div>
                        <pre>
                            { execute("sql/dump.sql") }
                        </pre>
                    </div>
                </div>
            </details>
            <div class="container">
                <div class="block">
                    A <span>@templ.Raw(highlight.Inline("SELECT"))</span> statement is a read-only query used to retrieve data from a table. It's typically the most commonly used query.
                </div>
                <div class="block">
                    @templ.Raw(highlight.Block(sources,
                        "sql/select.sql"))
                    <div>
                        <pre>
                            { execute("sql/select.sql") }
                        </pre>
                    </div>
                </div>
                <div class="block">
                    You can specify individual columns to retrieve, or <span>@templ.Raw(highlight.Inline("*"))</span> to retrieve all columns.
                </div>
                <div class="block">
                    @templ.Raw(highlight.Block(sources,
                        "sql/select_all.sql"))
                    <div>
                        <pre>
                            { execute("sql/select_all.sql") }
                        </pre>
                    </div>
                </div>
                <div class="block">
                    Some database engines allow you to concatenate multiple columns into one. In the case of SQLite, <span>@templ.Raw(highlight.Inline("||"))</span> is used. Other engines may use <span>@templ.Raw(highlight.Inline("+"))</span>, and most engines include a <span>@templ.Raw(highlight.Inline("CONCAT()"))</span> function which serves the same purpose.
                </div>
                <div class="block">
                    @templ.Raw(highlight.Block(sources,
                        "sql/select_concat.sql"))
                    <div>
                        <pre>
                            { execute("sql/select_concat.sql") }
                        </pre>
                    </div>
                </div>
                <div class="block">
                    The column name returned above is difficult to read. The keyword <span>@templ.Raw(highlight.Inline("AS"))</span> can be used to alias columns with any custom name.
                </div>
                <div class="block">
                    @templ.Raw(highlight.Block(sources,
                        "sql/select_as.sql"))
                    <div>
                        <pre>
                            { execute("sql/select_as.sql") }
                        </pre>
                    </div>
                </div>
                <div class="block">
                    If you want to alias a column with a name with spaces, surround the name with double quotation marks.
                </div>
                <div class="block">
                    @templ.Raw(highlight.Block(sources,
                        "sql/select_as_pretty.sql"))
                    <div>
                        <pre>
                            { execute("sql/select_as_pretty.sql") }
                        </pre>
                    </div>
                </div>
                <div class="block">
                    <span>@templ.Raw(highlight.Inline("SELECT DISTINCT"))</span> can be used when you want to return only unique values. Notice how in the example we only return one last name, where previous examples included both people with the same last name.
                </div>
                <div class="block">
                    @templ.Raw(highlight.Block(sources,
                        "sql/select_distinct.sql"))
                    <div>
                        <pre>
                            { execute("sql/select_distinct.sql") }
                        </pre>
                    </div>
                </div>
                <div class="block">
                    Some database engines allow a <span>@templ.Raw(highlight.Inline("SELECT"))</span> clause without a table to allow you to include arbitrary computations in your results. This can be useful as a test query, or when using a <a href="case"><span>@templ.Raw(highlight.Inline("CASE"))</span></a> statement.
                </div>
                <div class="block">
                    @templ.Raw(highlight.Block(sources,
                        "sql/select_computation.sql"))
                    <div>
                        <pre>
                            { execute("sql/select_computation.sql") }
                        </pre>
                    </div>
                </div>
            </div>
        </div>
    }
}

func read(path string) string {
    src, err := sources.ReadFile(path)
	if err != nil {
		return ""
	}
	return string(src)
}

func execute(path string) string {
    cols, rows, err := db.RunExample(read("sql/schema.sql"), read(path))
    if err != nil {
        panic(err)
    }
    f := db.MarkdownFormatter{Columns: cols, Rows: rows}
    return fmt.Sprintf("%s", f)
}

func executeRaw(sql string) string {
    cols, rows, err := db.RunExample(read("sql/schema.sql"), sql)
    if err != nil {
        panic(err)
    }
    f := db.MarkdownFormatter{Columns: cols, Rows: rows}
    return fmt.Sprintf("%s", f)
}
