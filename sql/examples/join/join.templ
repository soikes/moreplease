package where_query

import "soikke.li/moreplease/templates"
import "soikke.li/moreplease/sql/highlight"
import "soikke.li/moreplease/sql/db"
import "embed"

//go:embed sql/*.sql
var sources embed.FS

//TODO: Change rendering to use classes so we don't flood the page with inline styles.
templ Example() {
    {{ s := db.Statements{Sources: sources} }}
    @templates.Base("More SQL Please: JOIN") {
        <div class="content wide">
            <div class="title">
                <h1 class="example-title"><a href="/" class="home">More SQL Please</a>: <span class="title-em">JOIN</span></h1>
            </div>
            <details class="toggle">
                <summary class="action" data-open="hide tables" data-close="show tables"></summary>
                <div class="container tables">
                    <div class="tile">
                        <div class="tablename"><span>@templ.Raw(highlight.Inline("users"))</span></div>
                        <pre>
                            { s.Exec("sql/dump_users.sql") }
                        </pre>
                    </div>
                    <div class="tile">
                        <div class="tablename"><span>@templ.Raw(highlight.Inline("donations"))</span></div>
                        <pre>
                            { s.Exec("sql/dump_donations.sql") }
                        </pre>
                    </div>
                </div>
            </details>
            <div class="container">
                <div class="block">
                    A <span class="inline-code">@templ.Raw(highlight.Inline("JOIN"))</span> clause can be added to statements to combine results from multiple tables based on a relationship between them.<br><br>
                    In this example there are two tables: <span class="inline-code">@templ.Raw(highlight.Inline("users"))</span> and <span class="inline-code">@templ.Raw(highlight.Inline("donations"))</span>. Notice the donations table has a <span class="inline-code">@templ.Raw(highlight.Inline("user_id"))</span> column to indicate which user made that donation.<br><br>
                    In the query, you first specify the names and tables of all the columns to retrieve.<br><br>
                    Next, you specify the first table to query like a regular <span class="inline-code">@templ.Raw(highlight.Inline("SELECT"))</span>.<br><br>
                    Then you specify which type of <span class="inline-code">@templ.Raw(highlight.Inline("JOIN"))</span> to use on the other table. In this case, the type is an <span class="inline-code">@templ.Raw(highlight.Inline("INNER JOIN"))</span> which means that the query will only return rows that have a match in both tables. Notice how Priya has not made a donation yet so she is not included in the results.<br><br>
                    The <span class="inline-code">@templ.Raw(highlight.Inline("ON"))</span> clause is where you specify the relationship between the tables that you want the tables to be joined on. The types of these columns need to match. When you set up your tables,


                </div>
                <div class="block tile">
                    @templ.Raw(highlight.Block(sources,
                        "sql/join.sql"))
                    <div>
                        <pre>
                            { s.Exec("sql/join.sql") }
                        </pre>
                    </div>
                </div>
            </div>
        </div>
    }
}

/*
"sql/select_all_columns.sql",
"sql/select_alias.sql",
"sql/select_computation.sql",
*/
