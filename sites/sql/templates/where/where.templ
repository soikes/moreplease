package where_stmt

import (
	"embed"
	"soikke.li/moreplease/sites/sql/db"
	"soikke.li/moreplease/sites/sql/render"
	"soikke.li/moreplease/sites/sql/site"
	t "soikke.li/moreplease/templates"
)

//go:embed sql
var sqlFiles embed.FS

func init() {
	render.RegisterComponent(site.WherePage, Topic())
}

templ Topic() {
	{{
	s := db.Statements{
		Files:      sqlFiles,
		SchemaPath: "sql/schema/schema.sql",
	}
	e := t.Example{
		Statements: s,
	}
	}}
	@t.Page{Site: site.MSP, Page: site.MSP.Page(site.WherePage)}.Render() {
		@t.Schema(s, "users")
		<div class="container">
			<div>
				<p>
					A 
					<span>
						@t.Inline("WHERE")
					</span> clause can be added to statements to filter the outcome of the statement based on a condition.
				</p>
				<p>
					In the case of a 
					<span>
						@t.Inline("SELECT")
					</span>, this means the result set is filtered to only include results that match the condition. 
					<span>
						@t.Inline("WHERE")
					</span> can also be applied to 
					<span>
						@t.Inline("UPDATE")
					</span> and 
					<span>
						@t.Inline("DELETE")
					</span> statements to limit the rows they affect.
				</p>
				<p>
					Note that a column does not need to be included as a 
					<span>
						@t.Inline("SELECT")
					</span>ed column to be used in a 
					<span>
						@t.Inline("WHERE")
					</span> clause.
				</p>
			</div>
			@e.Run("sql/where.sql")
			<div>
				<p>
					<span>
						@t.Inline("WHERE")
					</span> clauses can use operators besides 
					<span>
						@t.Inline("=")
					</span> :
				</p>
				<p>
					<span>
						@t.Inline(">")
					</span>&ensp;Greater than.
				</p>
				<p>
					<span>
						@t.Inline("<")
					</span>&ensp;Less than.
				</p>
				<p>
					<span>
						@t.Inline(">=")
					</span>&ensp;Greater than or equal to.
				</p>
				<p>
					<span>
						@t.Inline("<=")
					</span>&ensp;Less than or equal to.
				</p>
				<p>
					<span>
						@t.Inline("<>")
					</span> or 
					<span>
						@t.Inline("!=")
					</span>&ensp;Not Equal.
				</p>
				<p>
					<span>
						@t.Inline("WHERE age BETWEEN 30 AND 40;")
					</span>&ensp;Match when between two values.
				</p>
				<p>
					<span>
						@t.Inline("WHERE email_address LIKE \"%mail.com\";")
					</span>&ensp;Match based on a pattern. 
					<span>
						@t.Inline("%")
					</span> is typically the wildcard character used to match 0 or more of any character.
				</p>
				<p>
					<span>
						@t.Inline("WHERE id IN (1,2,3);")
					</span>&ensp;Match based on any value in a list of values or a subquery.
				</p>
				<p>
					<span>
						@t.Inline("WHERE age IS NULL;")
					</span>&ensp;or&ensp;
					<span>
						@t.Inline("IS NOT NULL;")
					</span>&ensp;Check for NULL.
				</p>
				<p>
					See 
					<span>
						@t.Link(site.MSP.Page(site.OperatorsPage), "")
					</span> for more examples.
				</p>
			</div>
			@e.Run("sql/where_operators.sql")
			<div>
				<p>
					<span>
						@t.Inline("WHERE")
					</span> clauses can have multiple predicates separated by logical operators such as 
					<span>
						@t.Inline("AND")
					</span> and 
					<span>
						@t.Inline("OR")
					</span>. 
				</p>
				<p>
					The 
					<span>
						@t.Inline("NOT")
					</span> operator can be applied before any of the above operators to negate them.
				</p>
				<p>
					See <a href="operators">Operators</a> for more examples.
				</p>
			</div>
			@e.Run("sql/where_and.sql")
		</div>
	}
}
