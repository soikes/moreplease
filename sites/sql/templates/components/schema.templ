package components

import (
	"bytes"
	"fmt"
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/pkg/model"
	"github.com/soikes/moreplease/sites/sql/assets"
	"github.com/soikes/moreplease/sites/sql/site"
	c "github.com/soikes/moreplease/templates/components"
)

type Schema struct {
	Page   model.Page
	Config db.Config
}

templ (s *Schema) Component(tables ...string) {
	{{
		var docBuf bytes.Buffer
		err := s.popoutComponent(tables...).Render(ctx, &docBuf)
		if err != nil {
			panic(err)
		}
		var htmlBuf bytes.Buffer
		err = templ.Raw(docBuf.String()).Render(ctx, &htmlBuf)
		if err != nil {
			panic(err)
		}
	}}
	if len(tables) > 0 {
		<div class="schema">
			<details class="schema__toggle">
				<summary
					class="action heading heading--small schema__summary"
					data-open="hide tables"
					data-close="show tables"
				></summary>
				<div class="content">
					<popout-doc data-document={ htmlBuf.String() } class="heading schema__popout">
						<span>
							@c.Outlink("#", "pop out tables")
						</span>
					</popout-doc>
					@innerSchema(s.Config, tables...)
				</div>
			</details>
		</div>
	}
}

templ (s *Schema) popoutComponent(tables ...string) {
	{{
		title := fmt.Sprintf("%s (Tables)", s.Page.Title)
		b := c.Base{
			Title: title,
		}
	}}
	@b.Component(c.HashedImports(assets.Assets)) {
		<div class="padded content">
			@c.TopicTitle(site.MSP.Title, title)
			@innerSchema(s.Config, tables...)
		</div>
	}
}

templ innerSchema(cfg db.Config, tables ...string) {
	<div class="content content__horizontal">
		for _, table := range tables {
			<div class="tile">
				<h3 class="heading--small">
					{ table }
				</h3>
				<div class="table result">
					{ cfg.MustQueryFile(ctx, fmt.Sprintf("schema/dump_%s.sql", table)) }
				</div>
			</div>
		}
	</div>
}
