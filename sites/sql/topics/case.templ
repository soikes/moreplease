package topics

import (
	"github.com/soikes/moreplease/pkg/component"
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/sites/sql/render"
	"github.com/soikes/moreplease/sites/sql/site"
	sqlc "github.com/soikes/moreplease/sites/sql/templates/components"
	"github.com/soikes/moreplease/sites/sql/topics/statements"
	c "github.com/soikes/moreplease/templates/components"
)

func init() {
	p := site.MSP.Page(site.CasePage)
	c := Case{
		Topic: sqlc.Topic{
			Page: p,
			Config: db.Config{
				SQLFiles:   statements.MustSub(string(p.ID)),
				SchemaPath: "schema/schema.sql",
			},
			TableNames: []string{"products", "vendors", "orders"},
		},
	}
	render.Registry.MustRegisterComponent(p.ID.Asset(), component.NoOptions(c.TopicView()))
	render.Registry.MustRegisterComponent(p.ID.SchemaAsset(), component.NoOptions(c.SchemaView()))
}

type Case struct {
	sqlc.Topic
}

templ (t Case) TopicView() {
	{{
		e := sqlc.Example{
			Config: t.Config,
		}
		schema := sqlc.Schema{
			Page:       t.Page,
			Config:     t.Config,
			TableNames: t.TableNames,
		}
	}}
	@sqlc.Topic{Page: t.Page}.Component() {
		@schema.Component()
		<div class="content__two-column">
			<div>
				<p>
					The 
					<span>
						@c.InlineSQL("CASE")
					</span> expression allows you to add conditional logic to your queries. It is similar to the 
					<span>
						@c.InlineSQL("if ... else")
					</span> or 
					<span>
						@c.InlineSQL("switch")
					</span> expressions in other programming languages.
				</p>
				<p>
					Most database engines allow a 
					<span>
						@c.InlineSQL("CASE")
					</span> expression to return any data type (text, numbers, etc.) but each 
					<span>
						@c.InlineSQL("WHEN")
					</span> "branch" of the statement must return the same type as each other. SQLite allows any type to be returned but for compatibility, these examples will return the same type from all branches.
				</p>
				<p>
					This example shows a common use case where we want to create custom groups or "buckets" for the data that are not part of the database schema.
				</p>
			</div>
			@e.Run("case.sql")
			<div>
				<p>
					The conditions inside a 
					<span>
						@c.InlineSQL("CASE")
					</span> statement can be compounded using logical operators like 
					<span>
						@c.InlineSQL("AND")
					</span> and 
					<span>
						@c.InlineSQL("OR")
					</span>.
				</p>
				<p>
					Another thing to note about the 
					<span>
						@c.InlineSQL("CASE")
					</span> statement is that it is evaluated in order from top to bottom, left to right. For each row it will return a result for only the first match it encounters. If there are no matches and you supply an 
					<span>
						@c.InlineSQL("ELSE")
					</span> expression, that value will be the result.
					If you don't supply an 
					<span>
						@c.InlineSQL("ELSE")
					</span>, 
					<span>
						@c.InlineSQL("NULL")
					</span> is returned.
				</p>
				<p>
					Notice how the "Night Shift Coffee" product could technically match all of the "Critical Restock", "Urgent Restock" and "Restock Soon" categories. However once it matches "Critical Restock" the rest of the 
					<span>
						@c.InlineSQL("CASE")
					</span> is not evaluated and we move on to the next product. You can utilize this behaviour or you can design your queries such that none of the branches in your 
					<span>
						@c.InlineSQL("CASE")
					</span> overlap.
				</p>
			</div>
			@e.Run("case_and_or.sql")
			<div class="linkable" id="case_and_or">
				<p>
					The previous query is ordered alphabetically because our newly computed column 
					<span>
						@c.InlineSQL("needs_restock")
					</span> has a text data type. If we wanted to apply a custom order to the query we can also apply a 
					<span>
						@c.InlineSQL("CASE")
					</span> statement to our 
					<span>
						@c.InlineSQL("ORDER BY")
					</span> clause.
				</p>
				<p>
					Notice that this example also shows that you can add an expression directly after the 
					<span>
						@c.InlineSQL("CASE")
					</span> keyword; this is called a "base" expression. In this case it is 
					<span>
						@c.InlineSQL("needs_restock")
					</span><span>.</span> When a base expression is present it is evaluated once at the beginning. For each row, the value of 
					<span>
						@c.InlineSQL("needs_restock")
					</span> determines which integer is returned.
				</p>
				<p>
					As an aside, a better way to structure this query would be to use 
					<span>
						@c.Link(site.MSP.Page(site.CommonTableExpressionsPage), "")
					</span> to set up our results and ordering rules. An example of this can be seen at the 
					<span>
						@c.LinkWithText(site.MSP.Page(site.CasePage), "case_restructured") {
							bottom
						}
					</span> of the page.
				</p>
			</div>
			@e.Run("case_order_by.sql")
			<div>
				<p>
					<span>
						@c.InlineSQL("CASE")
					</span> can be used to check for 
					<span>
						@c.InlineSQL("NULL")
					</span> and display a more human-readable value.
				</p>
				<p>
					In simple cases like this, 
					<span>
						@c.InlineSQL("COALESCE()")
					</span> performs the same function.
				</p>
			</div>
			@e.Run("case_null.sql")
			<div>
				<p>
					<span>
						@c.InlineSQL("CASE")
					</span> expressions can be used as part of aggregate queries using 
					<span>
						@c.InlineSQL("GROUP BY")
					</span> and aggregate functions like 
					<span>
						@c.InlineSQL("avg()")
					</span><span>.</span>
				</p>
			</div>
			@e.Run("case_group_by.sql")
			<div>
				<p>
					<span>
						@c.InlineSQL("CASE")
					</span> can also be used as an input for aggregate functions. This technique is useful when you need to create "buckets" of data as above but group the data using another separate category. If you are familiar with spreadsheets, this technique is similar to that of a 
					<span>
						@c.Outlink("https://en.wikipedia.org/wiki/Pivot_table", "pivot table")
					</span><span>.</span>
				</p>
				<p>
					This example shows us how many of each price class of product each vendor has for sale.
				</p>
				<p>
					Notice how in this example we use a 
					<span>
						@c.InlineSQL("LEFT JOIN")
					</span> which will include vendors that have no products for sale. The vendor "Vend-tertainment" will return a 
					<span>
						@c.InlineSQL("NULL")
					</span> value for 
					<span>
						@c.InlineSQL("p.price")
					</span><span>.</span>
				</p>
				<p>
					This causes our 
					<span>
						@c.InlineSQL("CASE")
					</span> expressions to fall back to their 
					<span>
						@c.InlineSQL("ELSE")
					</span> return value of 
					<span>
						@c.InlineSQL("0")
					</span><span>.</span>
				</p>
			</div>
			@e.Run("case_aggregate_functions.sql")
			<div class="linkable" id="case_restructured">
				<p>
					Here is the example <a href="#case_and_or">above</a> that is restructured using 
					<span>
						@c.Link(site.MSP.Page(site.CommonTableExpressionsPage), "")
					</span> and 
					<span>
						@c.LinkWithText(site.MSP.Page(site.UnionAndSetOperatorsPage), "") {
							@c.InlineSQL("UNION")
						}
					</span> to be easier to maintain and understand. Instead of using the order status labels as our column names to match on, we use the integer 
					<span>
						@c.InlineSQL("id")
					</span> we created which reduces the likelihood of human error by misspelling one of the labels somewhere.
				</p>
				<p>
					When you need to re-use the same statements in multiple places in your query consider techniques like this that limit the amount of duplicate code you need to write.
				</p>
			</div>
			@e.Run("case_restructured.sql")
		</div>
	}
}

templ (t Case) SchemaView() {
	{{
		schema := sqlc.Schema{
			Page:       t.Page,
			Config:     t.Config,
			TableNames: t.TableNames,
		}
	}}
	@schema.StandaloneSchema()
}
