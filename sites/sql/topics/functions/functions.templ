package functions_topic

import (
    "embed"
    "soikke.li/moreplease/sites/sql/db"
    st "soikke.li/moreplease/sites/sql/templates"
    "soikke.li/moreplease/templates"
)

//go:embed sql
var sqlFiles embed.FS

templ Topic() {
    {{
        s := db.Statements{
            Files: sqlFiles,
            SchemaPath: "sql/schema/schema.sql",
        }
        e := st.Example{
            Statements: s,
        }
    }}
    @templates.Base("More SQL Please: Functions") {
        <div class="content wide">
            @st.TopicTitle("Functions")
            @st.Schema(s, "users", "donations")
            <div class="container">
                <div>
                    Most relational database engines support the ability to create and call functions as part of a SQL statement. Most also have commonly used utility functions already built-in.<br><br>
                    Functions that accept zero or more input values and produce a single output value per row are called "simple" or "scalar" functions. There are other types of functions that work with more than one row at a time and they are generally grouped into <a href="aggregate_functions">Aggregate Functions</a> and <a href="window_functions">Window Functions</a>.<br><br>
                    <span>@st.Inline("datetime()")</span> is a scalar function in SQLite that returns the current date and time.<br><br>
                    SQLite and most other database engines will publish <a href="https://www.sqlite.org/lang_corefunc.html">documentation<span>@st.Outlink()</span></a> on built-in functions available to use.
                </div>
                @e.Run("sql/functions_date.sql")
                <div>
                    Functions can operate on row results and be combined and nested as long as the data types of the inputs and outputs are all compatible.
                </div>
                @e.Run("sql/functions_nested.sql")
                <div>
                    Functions can be called in almost any part of a SQL query.
                </div>
                @e.Run("sql/statement_parts.sql")
            </div>
        </div>
    }
}
