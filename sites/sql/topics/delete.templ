package topics

import (
	"github.com/soikes/moreplease/pkg/component"
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/sites/sql/render"
	"github.com/soikes/moreplease/sites/sql/site"
	sqlc "github.com/soikes/moreplease/sites/sql/templates/components"
	"github.com/soikes/moreplease/sites/sql/topics/statements"
	c "github.com/soikes/moreplease/templates/components"
)

func init() {
	p := site.MSP.Page(site.DeletePage)
	t := Delete{
		Topic: sqlc.Topic{
			Page: p,
			Config: db.Config{
				SQLFiles:   statements.MustSub(string(p.ID)),
				SchemaPath: "schema/schema.sql",
			},
			TableNames: []string{"users", "posts"},
		},
	}
	render.Registry.MustRegisterComponent(p.ID.Asset(), component.NoOptions(t.TopicView()))
	render.Registry.MustRegisterComponent(p.ID.SchemaAsset(), component.NoOptions(t.SchemaView()))
}

type Delete struct {
	sqlc.Topic
}

templ (t Delete) TopicView() {
	{{
		e := sqlc.Example{Config: t.Config}
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@sqlc.Topic{Page: t.Page}.Component() {
		@schema.Component()
		<div class="content content__inner">
			<div>
				<p>
					The 
					<span>
						@c.InlineSQL("DELETE")
					</span> statement allows you to delete existing rows from a table.
				</p>
				<p>
					A 
					<span>
						@c.InlineSQL("DELETE")
					</span> will delete every row from a table unless a
					<span>
						@c.InlineSQL("WHERE")
					</span> clause is provided. 
				</p>
				<p>
					It is not required to provide a 
					<span>
						@c.InlineSQL("WHERE")
					</span> clause but it is highly recommended to avoid accidentally deleting all the rows in a table. Some database engines will warn or even prevent you from running a table-wide 
					<span>
						@c.InlineSQL("DELETE")
					</span> statement.
				</p>
				<p>
					It's usually a good idea to run a
					<span>
						@c.InlineSQL("SELECT")
					</span> statement with the same 
					<span>
						@c.InlineSQL("WHERE")
					</span> clause as the 
					<span>
						@c.InlineSQL("DELETE")
					</span> to check which rows will be deleted before actually performing the delete.
				</p>
				<p>
					Remember that each example on this website is editable and runnable so you can see the results of your 
					<span>
						@c.InlineSQL("DELETE")
					</span> by querying the contents of the table, i.e.: 
					<span>
						@c.InlineSQL("SELECT * FROM users;")
					</span>
				</p>
			</div>
			@e.Run("delete.sql")
			<div>
				Some database engines support the 
				<span>
					@c.InlineSQL("RETURNING")
				</span> clause, which will cause the database to return the rows that were deleted. You can specify the column names to return or 
				<span>
					@c.InlineSQL("*")
				</span> to include all columns.
			</div>
			@e.Run("delete_returning.sql")
			<div>
				<p>
					In this example we have two tables that have a relationship with each other; a 
					<span>
						@c.InlineSQL("post")
					</span> must have an associated 
					<span>
						@c.InlineSQL("user")
					</span> that created it.
				</p>
				<p>
					Remember that when you create a table you can define 
					<span>
						@c.LinkUnderConstruction(site.MSP.Page(site.ConstraintsPage), "")
					</span> that will tell the database to enforce certain rules on a column. In this example we defined a 
					<span>
						@c.LinkWithTextUnderConstruction(site.MSP.Page(site.PrimaryKeyPage), "") {
							<span>
								@c.InlineSQL("PRIMARY KEY")
							</span>
						}
					</span> on the 
					<span>
						@c.InlineSQL("id")
					</span> column of the 
					<span>
						@c.InlineSQL("users")
					</span> table and a 
					<span>
						@c.LinkWithTextUnderConstruction(site.MSP.Page(site.ForeignKeyPage), "") {
							<span>
								@c.InlineSQL("FOREIGN KEY")
							</span>
						}
					</span> on the 
					<span>
						@c.InlineSQL("user_id")
					</span> column of the 
					<span>
						@c.InlineSQL("posts")
					</span> table that references the user's 
					<span>
						@c.InlineSQL("id")
					</span>.
				</p>
				<p>
					When we try to delete a user that still has posts in the database, the deletion fails because of this constraint we added. This prevents the database from having posts that are no longer associated with a user, also known as "orphaned" records. See more in 
					<span>
						@c.LinkUnderConstruction(site.MSP.Page(site.SchemaDesignPage), "")
					</span>.
				</p>
			</div>
			@e.Run("delete_constraint_violation.sql")
		</div>
	}
}

templ (t Delete) SchemaView() {
	{{
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@schema.StandaloneSchema()
}
