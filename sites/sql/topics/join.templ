package topics

import (
	"soikke.li/moreplease/pkg/db"
	"soikke.li/moreplease/pkg/render"
	"soikke.li/moreplease/sites/sql/site"
	c "soikke.li/moreplease/templates/components"
)

func init() {
	render.MustRegisterComponent(site.JoinPage.Asset(), Join())
}

templ Join() {
	{{
	s := db.Statements{
		Files:      mustSub("embed/join"),
		SchemaPath: "schema/schema.sql",
	}
	e := c.Example{
		Statements: s,
	}
	p := site.MSP.Page(site.JoinPage)
	}}
	@c.Page{Site: site.MSP, Page: p}.Render() {
		@c.Schema(p, s, "users", "donations", "charities")
		<div class="container">
			<div>
				<p>
					A 
					<span>
						@c.Inline("JOIN")
					</span> clause can be added to statements to combine results from multiple tables based on a relationship between them.
				</p>
				<p>
					This example uses two tables: 
					<span>
						@c.Inline("users")
					</span> and 
					<span>
						@c.Inline("donations")
					</span>. Notice the donations table has a 
					<span>
						@c.Inline("user_id")
					</span> column to indicate which user made that donation.
				</p>
				<p>
					In the query you first specify the names of all the columns to retrieve. Prefixing the columns with table names is not required but it's good practice to be able to easily see which columns come from which table.
				</p>
				<p>
					An 
					<span>
						@c.Inline("INNER JOIN")
					</span> means that the query will only return rows that have a match in both tables. Notice how Priya has not made a donation yet so she is not included in the results.
				</p>
				<p>
					There is no functional difference between a 
					<span>
						@c.Inline("JOIN")
					</span> and an 
					<span>
						@c.Inline("INNER JOIN")
					</span>, it's just 
					<span>
						@c.Outlink("https://en.wikipedia.org/wiki/Syntactic_sugar", "syntactic sugar")
					</span>.
				</p>
				<p>
					The 
					<span>
						@c.Inline("ON")
					</span> clause is where you specify the relationship between the tables that you want them to be joined on. The data type of these columns needs to match.
				</p>
			</div>
			@e.Run("join.sql")
			<div>
				<p>
					You can alias the tables and column names to make your statements easier to read. Either use an 
					<span>
						@c.Inline("AS")
					</span> statement followed by the alias, or just the alias. Both versions are valid but choosing one and being consistent makes queries easier to read.
				</p>
				<p>
					Aliasing is especially useful for long table names or when two tables have the same column name. A column name you will encounter very often is 
					<span>
						@c.Inline("id")
					</span>.
				</p>
			</div>
			@e.Run("join_alias.sql")
			<div>
				<span>
					@c.Inline("INNER JOIN ... ON")
				</span> can be repeated multiple times to join more than two tables together.
			</div>
			@e.Run("join_all_tables.sql")
			<div>
				A 
				<span>
					@c.Inline("JOIN")
				</span> can be combined with a 
				<span>
					@c.Inline("WHERE")
				</span> clause to further narrow down the set of rows returned.
			</div>
			@e.Run("join_where.sql")
			<div>
				<p>
					A 
					<span>
						@c.Inline("LEFT JOIN")
					</span> (sometimes called 
					<span>
						@c.Inline("LEFT OUTER JOIN")
					</span>) can be used when you want to retrieve all of the rows from the first ("left") table combined with only rows that match from the second ("right") table. Rows from the left table that do not match anything in the right table will return 
					<span>
						@c.Inline("NULL")
					</span> in place of a donation amount.
				</p>
				<p>
					This type of 
					<span>
						@c.Inline("JOIN")
					</span> is useful when you are not sure if there will be a match for all the rows in your first table but you want to include them in your result.
				</p>
				<p>
					In this example we can now see in the results who has and who has not donated.
				</p>
				<p>
					A 
					<span>
						@c.Inline("RIGHT JOIN")
					</span> is similar but it returns all of the rows from the second ("right") table and only rows that match from the first ("left") table. It is rarely used in practice but may be useful when experimenting with queries.
				</p>
			</div>
			@e.Run("left_join.sql")
			<div>
				If we wanted to find only the people who have not donated, we can use a 
				<span>
					@c.Inline("WHERE")
				</span> clause to find the 
				<span>
					@c.Inline("NULL")
				</span> values from our 
				<span>
					@c.Inline("LEFT JOIN")
				</span>.
			</div>
			@e.Run("left_join_where_null.sql")
			<div>
				<p>
					A 
					<span>
						@c.Inline("FULL JOIN")
					</span> (sometimes called 
					<span>
						@c.Inline("FULL OUTER JOIN")
					</span>) is used when you want to return all rows from both tables whether they match or not.
				</p>
				<p>
					This query returns users that have donated, users that have not donated, and donations that are not currently associated with a user. The last case is commonly referred to as an "orphaned record", meaning the associated user was deleted at some point without also deleting their donation records. 
				</p>
				<p>
					This is generally considered bad practice in database design. Examples of how to prevent this can be found in 
					<span>
						@c.LinkWithText(site.MSP.Page(site.CascadePage), "") {
							@c.Inline("CASCADE")
						}
					</span>.
				</p>
			</div>
			@e.Run("full_join.sql")
			<div>
				<p>
					A table can be referred to itself with a 
					<span>
						@c.Inline("JOIN")
					</span>, also known as a "SELF" 
					<span>
						@c.Inline("JOIN")
					</span>.
				</p>
				<p>
					They are useful when a table has data that has a relationship with other data in the same table. In this example, users of the donation platform can refer other users and get a free credit.
				</p>
				<p>
					This technique requires you to alias the table with two different names.
				</p>
			</div>
			@e.Run("self_join.sql")
			<div>
				<p>
					A 
					<span>
						@c.Inline("CROSS JOIN")
					</span> returns the 
					<span>
						@c.Outlink("https://simple.wikipedia.org/wiki/Cartesian_product", "Cartesian product")
					</span> of rows from both tables. This means each row from the first table A is combined with each row from the second table B, returning all possible combinations of rows.
				</p>
				<p>
					This can generate very large amounts of data depending on the size of the input tables so caution is advised when deciding to use a 
					<span>
						@c.Inline("CROSS JOIN")
					</span>.
				</p>
				<p>
					This can be used to generate test data since it allows you to generate every possible scenario between two sets of data.
				</p>
			</div>
			@e.Run("cross_join.sql")
		</div>
	}
}
