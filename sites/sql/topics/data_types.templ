package topics

import (
	"github.com/soikes/moreplease/pkg/component"
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/sites/sql/render"
	"github.com/soikes/moreplease/sites/sql/site"
	sqlc "github.com/soikes/moreplease/sites/sql/templates/components"
	"github.com/soikes/moreplease/sites/sql/topics/statements"
	c "github.com/soikes/moreplease/templates/components"
)

func init() {
	p := site.MSP.Page(site.DataTypesPage)
	t := DataTypes{
		Topic: sqlc.Topic{
			Page: p,
			Config: db.Config{
				SQLFiles:   statements.MustSub(string(p.ID)),
				SchemaPath: "schema/schema.sql",
			},
			TableNames: []string{"profiles"},
		},
	}
	render.Registry.MustRegisterComponent(p.ID.Asset(), component.NoOptions(t.TopicView()))
	render.Registry.MustRegisterComponent(p.ID.SchemaAsset(), component.NoOptions(t.SchemaView()))
}

type DataTypes struct {
	sqlc.Topic
}

templ (t DataTypes) TopicView() {
	{{
		e := sqlc.Example{Config: t.Config}
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@sqlc.Topic{Page: t.Page}.Component() {
		@schema.Component()
		<div class="content content__inner">
			<div>
				<p>
					Relational databases typically require you to define which type of data you would like to store in each column. This is done at the time of table creation.
				</p>
				<p>
					The SQL Standard defines over 20 different data types for things like numbers, text, dates and more. The various database vendors such as PostgreSQL, MySQL, Microsoft SQL Server, and Oracle Database may not support them all and they may define their own extra types.
				</p>
				<p>
					This example uses a built-in SQLite function called 
					<span>
						@c.InlineSQL("pragma_table_info()")
					</span> on our 
					<span>
						@c.InlineSQL("profiles")
					</span> table to show each column and its data type.
				</p>
				<p>
					SQLite is different in that instead of exposing all of these different types, it simplifies things for the user by using just five basic types:
				</p>
				<p>
					<span>
						@c.InlineSQL("INTEGER")
					</span> <span>for</span> whole numbers.
				</p>
				<p>
					<span>
						@c.InlineSQL("REAL")
					</span> <span>for</span> floating-point (decimal) numbers.
				</p>
				<p>
					<span>
						@c.InlineSQL("TEXT")
					</span> <span>for</span> text-based data.
				</p>
				<p>
					<span>
						@c.InlineSQL("BLOB")
					</span> <span>for</span> binary data.
				</p>
				<p>
					<span>
						@c.InlineSQL("NULL")
					</span> <span>for</span> representing the absence of any type of data. Typically you can define columns to allow or disallow 
					<span>
						@c.InlineSQL("NULL")
					</span>s using 
					<span>
						@c.LinkUnderConstruction(site.MSP.Page(site.ConstraintsPage), "")
					</span><span>.</span>
				</p>
				<p>
					<span>
						@c.InlineSQL("ANY")
					</span> is a special keyword for a column that can accept any type of data. SQLite is unique in that it also allows dynamically-typed columns. See <a href="https://www.sqlite.org/datatype3.html">Datatypes in SQLite</a> <span>for</span> more details on data types.
				</p>
				<p>
					Each type has a maximum storage size in bytes which will limit how much data or how big of a value you can store in each row. Depending on your vocation and reasons for learning SQL you may or may not need to know those details, for example the maximum byte size of a data type.
				</p>
				<p>
					Don't worry if you don't understand what a byte is â€” that information is included as a starting point for those who want to learn more.
				</p>
				<p>
					Below you will see a more complete list of types from the SQL Standard and/or available to use in other database engines.
				</p>
			</div>
			@e.Run("data_types.sql")
			<div>
				<p>
					<i><b>Numeric types:</b></i>
					<p>
						<span>
							@c.InlineSQL("TINYINT")
						</span>, 
						<span>
							@c.InlineSQL("SMALLINT")
						</span> and 
						<span>
							@c.InlineSQL("MEDIUMINT")
						</span> <span>for</span> smaller positive/negative whole numbers; takes less space.
					</p>
					<p>
						<span>
							@c.InlineSQL("INT")
						</span> or 
						<span>
							@c.InlineSQL("INTEGER")
						</span> <span>for</span> positive/negative whole numbers.
					</p>
					<p>
						<span>
							@c.InlineSQL("BIGINT")
						</span> <span>for</span> larger whole numbers; takes more space.
					</p>
				</p>
			</div>
			@e.Run("integer.sql")
			<div>
				<p>
					<span>
						@c.InlineSQL("FLOAT")
					</span>, 
					<span>
						@c.InlineSQL("DOUBLE PRECISION")
					</span> and 
					<span>
						@c.InlineSQL("REAL")
					</span> <span>for</span> floating point (decimal) numbers. Typically a 
					<span>
						@c.InlineSQL("FLOAT")
					</span> can store 4 bytes (around 6 digits) of data, a 
					<span>
						@c.InlineSQL("DOUBLE PRECISION")
					</span> can store 8 bytes (around 15 digits), and 
					<span>
						@c.InlineSQL("REAL")
					</span> is usually equivalent to a 
					<span>
						@c.InlineSQL("FLOAT")
					</span>. Sometimes database vendors use 
					<span>
						@c.InlineSQL("FLOAT(n)")
					</span> where 
					<span>
						@c.InlineSQL("n")
					</span> is the storage space in bytes to use.
				</p>
				<p>
					<span>
						@c.InlineSQL("DECIMAL(p,s)")
					</span> or 
					<span>
						@c.InlineSQL("NUMERIC(p,s)")
					</span> <span>for</span> exact-precision floating point numbers. The 
					<span>
						@c.InlineSQL("p")
					</span> stands for "precision" and specifies the maximum amount of total digits. The 
					<span>
						@c.InlineSQL("s")
					</span> stands for "scale" and specifies the maximum amount of digits to the right of the decimal point. Both types exist for historical reasons but most modern databases treat 
					<span>
						@c.InlineSQL("DECIMAL")
					</span> and 
					<span>
						@c.InlineSQL("NUMERIC")
					</span> as synonyms. See your database's documentation to be sure.
				</p>
			</div>
			@e.Run("real.sql")
			<div>
				<p>
					<i><b>Text/string types:</b></i>
					<p>
						<span>
							@c.InlineSQL("CHAR(n)")
						</span> <span>for</span> fixed-length strings. 
						<span>
							@c.InlineSQL("n")
						</span> specifies how many characters the strings will have. Every row will store the same size of string regardless of how large the inserted strings are and the string will be padded or truncated.
					</p>
					<p>
						<span>
							@c.InlineSQL("VARCHAR(n)")
						</span> <span>for</span> variable-length strings. 
						<span>
							@c.InlineSQL("n")
						</span> specifies the maximum amount of characters a string can have.
					</p>
					<p>
						<span>
							@c.InlineSQL("TEXT")
						</span> <span>for</span> variable-length strings without a specified maximum. Typically this type has a very large maximum size and varies by database.
					</p>
				</p>
			</div>
			@e.Run("text.sql")
			<div>
				<p>
					<i><b>Date/Time types:</b></i>
					<p>
						<span>
							@c.InlineSQL("DATE")
						</span> <span>for</span> dates including the year, month and day.
					</p>
					<p>
						<span>
							@c.InlineSQL("TIME")
						</span> <span>for</span> times of day including the hour, minute and second.
					</p>
					<p>
						<span>
							@c.InlineSQL("TIMESTAMP")
						</span> or 
						<span>
							@c.InlineSQL("DATETIME")
						</span> <span>for</span> a combination of both date and time.
					</p>
					<p>
						SQLite does not include any special type for storing dates or times; it uses 
						<span>
							@c.InlineSQL("TEXT")
						</span> <span>for</span> this purpose and includes several built-in 
						<span>
							@c.Link(site.MSP.Page(site.FunctionsPage), "")
						</span> <span>for</span> working with dates and times.
					</p>
					<p>
						SQLite requires you to store dates/times in one of a few certain formats. The most human-readable format to use is an 
						<span>
							@c.Outlink("https://en.wikipedia.org/wiki/ISO_8601", "ISO-8601 formatted")
						</span> string.
					</p>
				</p>
			</div>
			@e.Run("date.sql")
			<div>
				<p>
					<i><b>Binary types:</b></i>
					<p>
						<span>
							@c.InlineSQL("BINARY(n)")
						</span> <span>for</span> fixed length 
						<span>
							@c.Outlink("https://en.wikipedia.org/wiki/Binary_file", "binary data")
						</span>, for example image data. 
						<span>
							@c.InlineSQL("n")
						</span> specifies the amount of bytes all rows will have. Every row will store the same size of data regardless of how large the inserted data is and the data will be padded or truncated.
					</p>
					<p>
						<span>
							@c.InlineSQL("VARBINARY(n)")
						</span> <span>for</span> variable length binary data. 
						<span>
							@c.InlineSQL("n")
						</span> specifies the maximum amount of bytes rows can have.
					</p>
					<p>
						<span>
							@c.InlineSQL("BLOB")
						</span> <span>for</span> variable-length binary objects without a specified maximum. Typically this type has a very large maximum size and varies by database. "BLOB" stands for "Binary Large Object".
					</p>
					<p>
						This example shows a text representation of what binary data would look like if stored in a SQLite 
						<span>
							@c.InlineSQL("BLOB")
						</span> column. In reality, binary data in its native format cannot be rendered as text and would look garbled or display squares. The 
						<span>
							@c.InlineSQL("x'...'")
						</span> format shown here can actually be used to insert the hexadecimal string representation of binary data into the column.
					</p>
				</p>
			</div>
			@e.Run("binary.sql")
			<div>
				<p>
					<i><b>Boolean types:</b></i>
					<p>
						<span>
							@c.InlineSQL("BOOLEAN")
						</span> <span>for</span> true/false values. This means every row must either be 
						<span>
							@c.InlineSQL("TRUE")
						</span> or 
						<span>
							@c.InlineSQL("FALSE")
						</span><span>.</span>
					</p>
					<p>
						SQLite has no built-in 
						<span>
							@c.InlineSQL("BOOLEAN")
						</span> type; boolean values are stored as the integer 
						<span>
							@c.InlineSQL("0")
						</span> <span>for</span> false and 
						<span>
							@c.InlineSQL("1")
						</span> <span>for</span> true.
					</p>
				</p>
			</div>
			@e.Run("boolean.sql")
			<div>
				<p>
					<i><b>Other types:</b></i>
					<p>
						<span>
							@c.InlineSQL("...[]")
						</span> <span>for</span> array types. 
						<span>
							@c.InlineSQL("TEXT[]")
						</span> is an example of an array of text data. Array types allow you to store lists of items together in a single column. SQLite does not support array data types but other database engines such as PostgreSQL support arrays for any valid type, like
						<span>
							@c.InlineSQL("TIMESTAMP[]")
						</span> and 
						<span>
							@c.InlineSQL("BOOLEAN[]")
						</span><span>.</span>
					</p>
					<p>
						Databases that support array types also provide syntax and functions for accessing elements from an array, for example 
						<span>
							@c.InlineSQL("users.names[0]")
						</span> to select the first element of an array-type row.
					</p>
					<p>
						<span>
							@c.InlineSQL("JSON")
						</span> <span>for</span> JSON-formatted data. Many modern databases have features and functions to deal specifically with JSON data. Some databases require you to use 
						<span>
							@c.InlineSQL("JSON")
						</span> <span>for</span> array data types and functions.
					</p>
					<p>
						<span>
							@c.InlineSQL("XML")
						</span> <span>for</span> XML-formatted data. Several modern databases have features specifically for working with XML data.
					</p>
					<p>
						<span>
							@c.InlineSQL("UUID")
						</span> <span>for</span> UUID-formatted IDs. Some databases have this as a built-in type so the data can be stored, found and compared more efficiently than a 
						<span>
							@c.InlineSQL("TEXT")
						</span>-like type.
					</p>
				</p>
			</div>
		</div>
	}
}

templ (t DataTypes) SchemaView() {
	{{
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@schema.StandaloneSchema()
}
