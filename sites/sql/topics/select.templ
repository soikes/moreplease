package topics

import (
	"github.com/soikes/moreplease/pkg/component"
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/sites/sql/render"
	"github.com/soikes/moreplease/sites/sql/site"
	sqlc "github.com/soikes/moreplease/sites/sql/templates/components"
	"github.com/soikes/moreplease/sites/sql/topics/statements"
	c "github.com/soikes/moreplease/templates/components"
)

func init() {
	p := site.MSP.Page(site.SelectPage)
	t := Select{
		Topic: sqlc.Topic{
			Page: p,
			Config: db.Config{
				SQLFiles:   statements.MustSub(string(p.ID)),
				SchemaPath: "schema/schema.sql",
			},
			TableNames: []string{"users"},
		},
	}
	render.Registry.MustRegisterComponent(p.ID.Asset(), component.NoOptions(t.TopicView()))
	render.Registry.MustRegisterComponent(p.ID.SchemaAsset(), component.NoOptions(t.SchemaView()))
}

type Select struct {
	sqlc.Topic
}

templ (t Select) TopicView() {
	{{
		e := sqlc.Example{Config: t.Config}
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@sqlc.Topic{Page: t.Page}.Component() {
		@schema.Component()
		<div class="content content__inner" data-fade-in>
			<div>
				<p>
					A
					<span>
						@c.InlineSQL("SELECT")
					</span> statement is a read-only query used to retrieve data from a table. It's typically the most commonly used query.
				</p>
			</div>
			@e.Run("select.sql")
			<div>
				<p>
					You can specify individual columns to retrieve, or 
					<span>
						@c.InlineSQL("*")
					</span> to retrieve all columns.
				</p>
			</div>
			@e.Run("select_all.sql")
			<div>
				<p>
					Most database engines allow you to perform computations on the columns you retrieve.
				</p>
				<p>
					Sometimes combining columns can be useful. In the case of SQLite, 
					<span>
						@c.InlineSQL("||")
					</span> is used to concatenate. Other engines may use 
					<span>
						@c.InlineSQL("+")
					</span>, and most engines include a 
					<span>
						@c.InlineSQL("concat()")
					</span> <a href="/functions">function</a> which serves the same purpose.
				</p>
				<p>
					Here we concatenate first and last name with a space in between. Single quotes are used to begin and end strings in SQL.
				</p>
			</div>
			@e.Run("select_concat.sql")
			<div>
				<p>
					The column name returned above is difficult to read. The keyword 
					<span>
						@c.InlineSQL("AS")
					</span> can be used to alias columns with any custom name.
				</p>
			</div>
			@e.Run("select_as.sql")
			<div>
				<p>
					If you want to alias a column with a value that includes spaces, surround the name with double quotation marks.
				</p>
			</div>
			@e.Run("select_as_pretty.sql")
			<div>
				<p>
					<span>
						@c.InlineSQL("SELECT DISTINCT")
					</span> can be used when you want to return only unique values.
				</p>
				<p>
					Notice how in the example the last name "Amini" appears once where previous examples included both people with the same last name.
				</p>
			</div>
			@e.Run("select_distinct.sql")
			<div>
				<p>
					Some database engines allow a 
					<span>
						@c.InlineSQL("SELECT")
					</span> clause without a table to allow you to include arbitrary computations in your results. This can be useful as a test query or when using a
					<span>
						@c.LinkWithText(site.MSP.Page(site.UnionAndSetOperatorsPage), "") {
							@c.InlineSQL("UNION")
						}
					</span> operator.
				</p>
				<p>
					Note that if you don't supply an alias for computed columns, the column name will typically default to the same value as the row.
				</p>
			</div>
			@e.Run("select_computation.sql")
		</div>
	}
}

templ (t Select) SchemaView() {
	{{
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@schema.StandaloneSchema()
}
