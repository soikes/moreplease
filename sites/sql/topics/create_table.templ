package topics

import (
	"soikke.li/moreplease/pkg/db"
	"soikke.li/moreplease/pkg/render"
	"soikke.li/moreplease/sites/sql/site"
	c "soikke.li/moreplease/templates/components"
)

func init() {
	render.MustRegisterComponent(site.CreateTablePage.Asset(), CreateTable())
}

templ CreateTable() {
	{{
	s := db.Statements{
		Files:      mustSub("embed/create_table"),
		SchemaPath: "schema/schema.sql",
	}
	e := c.Example{
		Statements: s,
	}
	p := site.MSP.Page(site.CreateTablePage)
	}}
	@c.Page{Site: site.MSP, Page: p}.Render() {
		@c.Schema(p, s, "users")
		<div class="container">
			<div>
				<p>
					The 
					<span>
						@c.Inline("CREATE TABLE")
					</span> statement is used to create new tables in a database.
				</p>
				<p>
					A table needs to be created before any data can be inserted into or queried from it. When a table is created it will persist until it is deleted using a 
					<span>
						@c.LinkWithText(site.MSP.Page(site.DropTablePage), "") {
							@c.Inline("DROP TABLE")
						}
					</span> statement. This example shows how to create a table 'posts' that can be used to store message board posts from users.
				</p>
				<p>
					A 
					<span>
						@c.Inline("CREATE TABLE")
					</span> must contain the table name, any columns you wish to create, and the associated 
					<span>
						@c.LinkWithText(site.MSP.Page(site.DataTypesPage), "") {
							data type
						}
					</span> <span>for</span> that column.
				</p>
				<p>
					On this website, every table shown at the top of the page is created using a 
					<span>
						@c.Inline("CREATE TABLE")
					</span> statement that is run automatically in the background. This section will show examples of creating new tables in the same database using more 
					<span>
						@c.Inline("CREATE TABLE")
					</span> statements.
				</p>
				<p>
					Database engines have various ways to show the structure of an existing table. SQLite has a series of special "system" tables you can 
					<span>
						@c.Inline("SELECT")
					</span> to get information about the database/tables themselves. 
					<span>
						@c.Inline("pragma_table_info(...)")
					</span> is one such table that we query to see information about the 'posts' table we just created. Other database engines use special syntax such as 
					<span>
						@c.Inline("DESCRIBE ...")
					</span> <span>for</span> the same purpose.
				</p>
				<p id="primary_key">
					You may notice the 'id' column declaration in our 'posts' table is followed by the keywords 
					<span>
						@c.Inline("PRIMARY KEY")
					</span><span>.</span> This is what is known as a 
					<span>
						@c.LinkWithText(site.MSP.Page(site.ConstraintsPage), "") {
							Constraint
						}
					</span> and it tells the database to uniquely identify each row using this column.
				</p>
			</div>
			@e.Run("create_posts.sql")
			<div>
				<p>
					Once a table is created, it persists in the database. Trying to recreate an existing table results in an error. The modifier 
					<span>
						@c.Inline("IF NOT EXISTS")
					</span> can be applied to only create a table if it doesn't already exist. This can be useful if you have some code or process that automatically creates your tables for you and you want to be able to run it multiple times without causing an error.
				</p>
				<p>
					This example actually does nothing when run because the table 'users' already exists.
				</p>
				<p>
					Try removing 
					<span>
						@c.Inline("IF NOT EXISTS")
					</span> from the example and running it again. Notice how it now returns an error because the table 'users' already exists.
				</p>
			</div>
			@e.Run("create_if_not_exists.sql")
			<div>
				<p>
					Most database engines have the ability to create "generated" columns, which are columns where the value is generated by some operation on the other columns in the table. This example shows an example of combining the first and last names for a user into a generated column.
				</p>
				<p>
					Generated columns can be created as either 
					<span>
						@c.Inline("STORED")
					</span> or 
					<span>
						@c.Inline("VIRTUAL")
					</span> columns. A virtual column has its value computed when the row is read, for example at the time of a 
					<span>
						@c.Inline("SELECT")
					</span> statement including the column. A stored column has its value computed when the row is written to the database, for example at the time of an 
					<span>
						@c.LinkWithText(site.MSP.Page(site.InsertPage), "") {
							@c.Inline("INSERT")
						}
					</span> statement.
				</p>
				<p>
					Note that a slightly different system table
					<span>
						@c.Inline("pragma_table_xinfo(...)")
					</span> is used here to include generated columns.
				</p>
			</div>
			@e.Run("create_generated.sql")
			<div>
				<p>
					You can populate the contents of a created table using the 
					<span>
						@c.Inline("AS")
					</span> keyword followed by a 
					<span>
						@c.Inline("SELECT")
					</span> statement.
				</p>
				<p>
					This example uses this feature to create a copy of a table with data from a specific date.
				</p>
				<p>
					This is a simple technique for copying data but be aware that 
					<span>
						@c.Inline("CREATE TABLE ... AS")
					</span> will not copy table constraints, indexes, table permissions and other metadata that a database might associate with a table. See 
					<span>
						@c.Link(site.MSP.Page(site.BackupAndRecoveryPage), "")
					</span> <span>for</span> details on recommended techniques for backing up data in relational databases.
				</p>
			</div>
			@e.Run("create_as.sql")
			<div>
				<p>
					A table can created as a "temporary" table using the 
					<span>
						@c.Inline("CREATE TEMPORARY TABLE")
					</span> modifier. A temporary table is a table that only exists until you terminate your client session with the database server. At that point, any temporary tables are deleted and cleaned up automatically.
				</p>
				<p>
					Different database engines may use different syntax to create temporary tables. They also may handle permissions differently. Some engines make temporary tables accessible only to the creating session. Others like SQLite create them in a separate temporary database file.
				</p>
				<p>
					Temporary tables have various use cases. Because they are persisted between statements, they can be used to break down complex queries into smaller ones or store the intermediate results of calculations.
				</p>
				<p>
					This example shows how you could break down a larger table into smaller groups to be able to perform analytical queries on different demographics.
				</p>
			</div>
			@e.Run("create_temporary.sql")
		</div>
	}
}
