package topics

import (
	"soikke.li/moreplease/pkg/db"
	"soikke.li/moreplease/pkg/render"
	"soikke.li/moreplease/sites/sql/site"
	c "soikke.li/moreplease/templates/components"
)

func init() {
	render.MustRegisterComponent(site.UpdatePage.Asset(), Update())
}

templ Update() {
	{{
		s := db.Statements{
			Files:      mustSub("embed/update"),
			SchemaPath: "schema/schema.sql",
		}
		e := c.Example{
			Statements: s,
		}
		p := site.MSP.Page(site.UpdatePage)
	}}
	@c.Page{Site: site.MSP, Page: p}.Render() {
		@c.Schema(p, s, "users")
		<div class="container">
			<div>
				<p>
					The 
					<span>
						@c.Inline("UPDATE")
					</span> statement allows you to update existing rows with new values for one or more columns.
				</p>
				<p>
					An 
					<span>
						@c.Inline("UPDATE")
					</span> will modify every row of the table unless a 
					<span>
						@c.Inline("WHERE")
					</span> clause is provided. 
				</p>
				<p>
					It is not required to provide a 
					<span>
						@c.Inline("WHERE")
					</span> clause but it is highly recommended to avoid accidental updates to the entire table. Some database engines will warn or even prevent you from running a table-wide 
					<span>
						@c.Inline("UPDATE")
					</span> statement.
				</p>
				<p>
					You can run a 
					<span>
						@c.Inline("SELECT")
					</span> statement with the same 
					<span>
						@c.Inline("WHERE")
					</span> clause to check which rows will be altered with an 
					<span>
						@c.Inline("UPDATE")
					</span> before actually performing the update.
				</p>
				<p>
					Remember that each example on this website is editable and runnable so you can see the results of your 
					<span>
						@c.Inline("UPDATE")
					</span> by querying the contents of the table, i.e.: 
					<span>
						@c.Inline("SELECT * FROM users;")
					</span>
				</p>
			</div>
			@e.Run("update.sql")
			<div>
				<p>
					You can update multiple columns within the same 
					<span>
						@c.Inline("UPDATE")
					</span> statement.
				</p>
			</div>
			@e.Run("update_multiple.sql")
			<div>
				An 
				<span>
					@c.Inline("UPDATE")
				</span> can use the result of a computation. This example shows using negation logic to toggle the value of a column between 
				<span>
					@c.Inline("0")
				</span> and 
				<span>
					@c.Inline("1")
				</span> on each update.
			</div>
			@e.Run("update_computation.sql")
			<div>
				<p>
					Similar to an 
					<span>
						@c.Inline("INSERT")
					</span>,
					<span>
						@c.Inline("UPDATE")
					</span> accepts an optional fallback strategy using 
					<span>
						@c.Inline("OR")
					</span> when the update would cause a constraint violation and fail.
				</p>
				<p>
					Try removing the 
					<span>
						@c.Inline("OR IGNORE")
					</span> clause and run the example again. Notice that the 
					<span>
						@c.Inline("UPDATE")
					</span> now fails with an error.
				</p>
			</div>
			@e.Run("update_or.sql")
			<div>
				Some database engines support the 
				<span>
					@c.Inline("RETURNING")
				</span> clause, which will cause the database to return the rows that were updated. You can specify column names to return or 
				<span>
					@c.Inline("*")
				</span> to include all columns.
			</div>
			@e.Run("update_returning.sql")
		</div>
	}
}
