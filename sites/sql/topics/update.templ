package topics

import (
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/sites/sql/render"
	"github.com/soikes/moreplease/sites/sql/site"
	sqlc "github.com/soikes/moreplease/sites/sql/templates/components"
	"github.com/soikes/moreplease/sites/sql/topics/statements"
	c "github.com/soikes/moreplease/templates/components"
)

func init() {
	p := site.MSP.Page(site.UpdatePage)
	t := Update{
		Topic: sqlc.Topic{
			Page: p,
			Config: db.Config{
				SQLFiles:   statements.MustSub(string(p.ID)),
				SchemaPath: "schema/schema.sql",
			},
			TableNames: []string{"users"},
		},
	}
	render.Registry.MustRegisterComponent(p.ID.Asset(), t.TopicView())
	render.Registry.MustRegisterComponent(p.ID.SchemaAsset(), t.SchemaView())
}

type Update struct {
	sqlc.Topic
}

templ (t Update) TopicView() {
	{{
		e := sqlc.Example{Config: t.Config}
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@sqlc.Topic{Page: t.Page}.Component() {
		@schema.Component()
		<div class="content__two-column">
			<div>
				<p>
					The 
					<span>
						@c.InlineSQL("UPDATE")
					</span> statement allows you to update existing rows with new values for one or more columns.
				</p>
				<p>
					An 
					<span>
						@c.InlineSQL("UPDATE")
					</span> will modify every row of the table unless a 
					<span>
						@c.InlineSQL("WHERE")
					</span> clause is provided. 
				</p>
				<p>
					It is not required to provide a 
					<span>
						@c.InlineSQL("WHERE")
					</span> clause but it is highly recommended to avoid accidental updates to the entire table. Some database engines will warn or even prevent you from running a table-wide 
					<span>
						@c.InlineSQL("UPDATE")
					</span> statement.
				</p>
				<p>
					You can run a 
					<span>
						@c.InlineSQL("SELECT")
					</span> statement with the same 
					<span>
						@c.InlineSQL("WHERE")
					</span> clause to check which rows will be altered with an 
					<span>
						@c.InlineSQL("UPDATE")
					</span> before actually performing the update.
				</p>
				<p>
					Remember that each example on this website is editable and runnable so you can see the results of your 
					<span>
						@c.InlineSQL("UPDATE")
					</span> by querying the contents of the table, i.e.: 
					<span>
						@c.InlineSQL("SELECT * FROM users;")
					</span>
				</p>
			</div>
			@e.Run("update.sql")
			<div>
				<p>
					You can update multiple columns within the same 
					<span>
						@c.InlineSQL("UPDATE")
					</span> statement.
				</p>
			</div>
			@e.Run("update_multiple.sql")
			<div>
				An 
				<span>
					@c.InlineSQL("UPDATE")
				</span> can use the result of a computation. This example shows using negation logic to toggle the value of a column between 
				<span>
					@c.InlineSQL("0")
				</span> and 
				<span>
					@c.InlineSQL("1")
				</span> on each update.
			</div>
			@e.Run("update_computation.sql")
			<div>
				<p>
					Similar to an 
					<span>
						@c.InlineSQL("INSERT")
					</span>,
					<span>
						@c.InlineSQL("UPDATE")
					</span> accepts an optional fallback strategy using 
					<span>
						@c.InlineSQL("OR")
					</span> when the update would cause a constraint violation and fail.
				</p>
				<p>
					Try removing the 
					<span>
						@c.InlineSQL("OR IGNORE")
					</span> clause and run the example again. Notice that the 
					<span>
						@c.InlineSQL("UPDATE")
					</span> now fails with an error.
				</p>
			</div>
			@e.Run("update_or.sql")
			<div>
				Some database engines support the 
				<span>
					@c.InlineSQL("RETURNING")
				</span> clause, which will cause the database to return the rows that were updated. You can specify column names to return or 
				<span>
					@c.InlineSQL("*")
				</span> to include all columns.
			</div>
			@e.Run("update_returning.sql")
		</div>
	}
}

templ (t Update) SchemaView() {
	{{
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@schema.StandaloneSchema()
}
