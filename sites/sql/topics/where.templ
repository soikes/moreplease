package topics

import (
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/sites/sql/render"
	"github.com/soikes/moreplease/sites/sql/site"
	sqlc "github.com/soikes/moreplease/sites/sql/templates/components"
	"github.com/soikes/moreplease/sites/sql/topics/statements"
	c "github.com/soikes/moreplease/templates/components"
)

func init() {
	p := site.MSP.Page(site.WherePage)
	t := Where{
		Topic: sqlc.Topic{
			Page: p,
			Config: db.Config{
				SQLFiles:   statements.MustSub(string(p.ID)),
				SchemaPath: "schema/schema.sql",
			},
			TableNames: []string{"users"},
		},
	}
	render.Registry.MustRegisterComponent(p.ID.Asset(), t.TopicView())
	render.Registry.MustRegisterComponent(p.ID.SchemaAsset(), t.SchemaView())
}

type Where struct {
	sqlc.Topic
}

templ (t Where) TopicView() {
	{{
		e := sqlc.Example{Config: t.Config}
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@sqlc.Topic{Page: t.Page}.Component() {
		@schema.Component()
		<div class="content__two-column">
			<div>
				<p>
					A 
					<span>
						@c.InlineSQL("WHERE")
					</span> clause can be added to statements to filter the outcome of the statement based on a condition.
				</p>
				<p>
					In the case of a 
					<span>
						@c.InlineSQL("SELECT")
					</span>, this means the result set is filtered to only include results that match the condition. 
					<span>
						@c.InlineSQL("WHERE")
					</span> can also be applied to 
					<span>
						@c.InlineSQL("UPDATE")
					</span> and 
					<span>
						@c.InlineSQL("DELETE")
					</span> statements to limit the rows they affect.
				</p>
				<p>
					Note that a column does not need to be included as a 
					<span>
						@c.InlineSQL("SELECT")
					</span>ed column to be used in a 
					<span>
						@c.InlineSQL("WHERE")
					</span> clause.
				</p>
			</div>
			@e.Run("where.sql")
			<div>
				<p>
					<span>
						@c.InlineSQL("WHERE")
					</span> clauses can use operators besides 
					<span>
						@c.InlineSQL("=")
					</span> :
				</p>
				<p>
					<span>
						@c.InlineSQL(">")
					</span>&ensp;Greater than.
				</p>
				<p>
					<span>
						@c.InlineSQL("<")
					</span>&ensp;Less than.
				</p>
				<p>
					<span>
						@c.InlineSQL(">=")
					</span>&ensp;Greater than or equal to.
				</p>
				<p>
					<span>
						@c.InlineSQL("<=")
					</span>&ensp;Less than or equal to.
				</p>
				<p>
					<span>
						@c.InlineSQL("<>")
					</span> or 
					<span>
						@c.InlineSQL("!=")
					</span>&ensp;Not Equal.
				</p>
				<p>
					<span>
						@c.InlineSQL("WHERE age BETWEEN 30 AND 40;")
					</span>&ensp;Match when between two values.
				</p>
				<p>
					<span>
						@c.InlineSQL("WHERE email_address LIKE '%mail.com';")
					</span>&ensp;Match based on a pattern. 
					<span>
						@c.InlineSQL("%")
					</span> is typically the wildcard character used to match 0 or more of any character.
				</p>
				<p>
					<span>
						@c.InlineSQL("WHERE id IN (1,2,3);")
					</span>&ensp;Match based on any value in a list of values or a subquery.
				</p>
				<p>
					<span>
						@c.InlineSQL("WHERE age IS NULL;")
					</span>&ensp;or&ensp;
					<span>
						@c.InlineSQL("IS NOT NULL;")
					</span>&ensp;Check for NULL.
				</p>
				<p>
					See 
					<span>
						@c.Link(site.MSP.Page(site.OperatorsPage), "")
					</span> <span>for</span> more examples.
				</p>
			</div>
			@e.Run("where_operators.sql")
			<div>
				<p>
					<span>
						@c.InlineSQL("WHERE")
					</span> clauses can have multiple predicates separated by logical operators such as 
					<span>
						@c.InlineSQL("AND")
					</span> and 
					<span>
						@c.InlineSQL("OR")
					</span><span>.</span>
				</p>
				<p>
					The 
					<span>
						@c.InlineSQL("NOT")
					</span> operator can be applied before any of the above operators to negate them.
				</p>
				<p>
					See 
					<span>
						@c.Link(site.MSP.Page(site.OperatorsPage), "")
					</span> <span>for</span> more examples.
				</p>
			</div>
			@e.Run("where_and.sql")
		</div>
	}
}

templ (t Where) SchemaView() {
	{{
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@schema.StandaloneSchema()
}
