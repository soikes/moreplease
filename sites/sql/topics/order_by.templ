package topics

import (
	"github.com/soikes/moreplease/pkg/component"
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/sites/sql/render"
	"github.com/soikes/moreplease/sites/sql/site"
	sqlc "github.com/soikes/moreplease/sites/sql/templates/components"
	"github.com/soikes/moreplease/sites/sql/topics/statements"
	c "github.com/soikes/moreplease/templates/components"
)

func init() {
	p := site.MSP.Page(site.OrderByPage)
	t := OrderBy{
		Topic: sqlc.Topic{
			Page: p,
			Config: db.Config{
				SQLFiles:   statements.MustSub(string(p.ID)),
				SchemaPath: "schema/schema.sql",
			},
			TableNames: []string{"users"},
		},
	}
	render.Registry.MustRegisterComponent(p.ID.Asset(), component.NoOptions(t.TopicView()))
	render.Registry.MustRegisterComponent(p.ID.SchemaAsset(), component.NoOptions(t.SchemaView()))
}

type OrderBy struct {
	sqlc.Topic
}

templ (t OrderBy) TopicView() {
	{{
		e := sqlc.Example{Config: t.Config}
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@sqlc.Topic{Page: t.Page}.Component() {
		@schema.Component()
		<div class="content content__inner">
			<div>
				<p>
					The 
					<span>
						@c.InlineSQL("ORDER BY")
					</span> clause allows you to sort the results of a query based on a particular column.
				</p>
				<p>
					Rows have no defined sort order in most databases by default. If no 
					<span>
						@c.InlineSQL("ORDER BY")
					</span> clause is specified, rows are returned based on speed and efficiency and should not be relied on to return rows in the same order every time.
				</p>
				<p>
					To sort rows in ascending order use 
					<span>
						@c.InlineSQL("ORDER BY ... ASC")
					</span> and to sort in descending order use 
					<span>
						@c.InlineSQL("ORDER BY ... DESC")
					</span><span>.</span>
				</p>
				<p>
					The method by which a column is sorted depends on the data type of the column. By default in most database engines 
					<span>
						@c.InlineSQL("ASC")
					</span> will sort 
					<span>
						@c.InlineSQL("INTEGER")
					</span> types numerically from lowest to highest, 
					<span>
						@c.InlineSQL("TEXT")
					</span> types alphabetically, and 
					<span>
						@c.InlineSQL("DATE")
					</span> and similar types chronologically from oldest to newest. Refer to the particular database engine you use to see how other types are sorted.
				</p>
				<p>
					It is best practice to <i>always</i> be explicit and include an 
					<span>
						@c.InlineSQL("ORDER BY")
					</span> in your queries. For brevity, the rest of the examples on this website will not include 
					<span>
						@c.InlineSQL("ORDER BY")
					</span> unless it's relevant to the example.
				</p>
			</div>
			@e.Run("order_by.sql")
			<div>
				<span>
					@c.InlineSQL("ORDER BY")
				</span> can be applied to multiple columns which applies the sorting in that order when a column has duplicate values.
			</div>
			@e.Run("order_by_multicolumn.sql")
			<div>
				<span>
					@c.InlineSQL("ORDER BY")
				</span> is applied after other clauses like 
				<span>
					@c.InlineSQL("WHERE")
				</span> but there are some clauses that are applied after it such as 
				@c.LinkWithText(site.MSP.Page(site.LimitPage), "") {
					@c.InlineSQL("LIMIT")
				}
				.
			</div>
			@e.Run("order_by_where.sql")
			<div>
				<p>
					<span>
						@c.InlineSQL("NULL")
					</span> values are sorted differently depending on the database engine used. SQLite treats 
					<span>
						@c.InlineSQL("NULL")
					</span> as "smaller" than non-
					<span>
						@c.InlineSQL("NULL")
					</span> values, meaning they will appear first if you 
					<span>
						@c.InlineSQL("ORDER BY ... ASC")
					</span><span>.</span>
				</p>
				<p>
					Some database engines, including SQLite, support 
					<span>
						@c.InlineSQL("ASC NULLS LAST")
					</span> or 
					<span>
						@c.InlineSQL("DESC NULLS FIRST")
					</span> clauses which alter the default ordering of 
					<span>
						@c.InlineSQL("NULL")
					</span> in the results.
				</p>
			</div>
			@e.Run("order_by_null.sql")
			<div class="linkable" id="collation">
				<p>
					Capitalized letters, special characters, whitespace and numbers inside strings have a particular sort order depending on the database engine. Be sure to find out the default ordering and comparison rules, or "collation", for the database you are using.
				</p>
				<p>
					The default collation for text in SQLite is called 
					<span>
						@c.InlineSQL("BINARY")
					</span> which means text characters are compared based on their binary (ASCII/Unicode) representation.
					See 
					<span>
						@c.Outlink("https://en.wikipedia.org/wiki/ASCII#Character_order", "ASCII Character Order")
					</span><span>.</span>
				</p>
				<p>
					This is why "james" appears at the bottom of the 
					<span>
						@c.InlineSQL("ASC")
					</span> ordered query.
				</p>
			</div>
			@e.Run("order_by_special_characters.sql")
			<div>
				<p>
					The 
					<span>
						@c.InlineSQL("COLLATE")
					</span> operator can be used to alter the collation rules for the current statement. SQLite includes three collation sequences:
				</p>
				<p>
					<span>
						@c.InlineSQL("RTRIM")
					</span>: Ignores trailing whitespace.
				</p>
				<p>
					<span>
						@c.InlineSQL("NOCASE")
					</span>: Ignores case.
				</p>
				<p>
					<span>
						@c.InlineSQL("BINARY")
					</span>: Compare text characters based on their binary (ASCII/Unicode) representation.
				</p>
				<p>
					SQLite itself can be compiled with extensions such as language-specific collations. Other database engines like 
					<span>
						@c.Outlink("https://dev.mysql.com/doc/refman/8.4/en/charset-mysql.html", "MySQL")
					</span> or 
					<span>
						@c.Outlink("https://www.postgresql.org/docs/current/collation.html#COLLATION-MANAGING-STANDARD", "PostgreSQL")
					</span> offer more built-in collations.
				</p>
			</div>
			@e.Run("order_by_collate.sql")
			<div>
				<p>
					Computations can be applied to an 
					<span>
						@c.InlineSQL("ORDER BY")
					</span><span>.</span> This example shows a query that orders the table based on the total length of a user's first and last name.
				</p>
				<p>
					<span>
						@c.InlineSQL("length()")
					</span> is an unrelated <a href="/functions">function</a> that is included to demonstrate the example.
				</p>
			</div>
			@e.Run("order_by_computation_direct.sql")
			<div>
				<p>
					If we want to show the result of the computation and still order by it, 
					<span>
						@c.InlineSQL("ORDER BY")
					</span> will accept an alias created earlier in the statement.
				</p>
				<p>
					Applying computations to 
					<span>
						@c.InlineSQL("ORDER BY")
					</span> can be used in clever ways to sort data that would not be possible with the data itself.
				</p>
			</div>
			@e.Run("order_by_computation.sql")
		</div>
	}
}

templ (t OrderBy) SchemaView() {
	{{
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@schema.StandaloneSchema()
}
