package topics

import (
	"soikke.li/moreplease/pkg/db"
	"soikke.li/moreplease/pkg/render"
	"soikke.li/moreplease/sites/sql/site"
	c "soikke.li/moreplease/templates/components"
)

func init() {
	render.MustRegisterComponent(site.FunctionsPage.Asset(), Functions())
}

templ Functions() {
	{{
	s := db.Statements{
		Files:      mustSub("embed/functions"),
		SchemaPath: "schema/schema.sql",
	}
	e := c.Example{
		Statements: s,
	}
	p := site.MSP.Page(site.FunctionsPage)
	}}
	@c.Page{Site: site.MSP, Page: p}.Render() {
		@c.Schema(p, s, "users", "transactions")
		<div class="container">
			<div>
				<p>
					Most relational database engines support the ability to create and call functions as part of a SQL statement. Most also have commonly used utility functions already built-in.
				</p>
				<p>
					Functions that accept zero or more input values and produce a single output value per row are called "simple" or "scalar" functions. There are other types of functions that work with more than one row at a time and they are generally grouped into 
					<span>
						@c.Link(site.MSP.Page(site.AggregateFunctionsPage), "")
					</span> and 
					<span>
						@c.Link(site.MSP.Page(site.WindowFunctionsPage), "")
					</span>.
				</p>
				<p>
					<span>
						@c.Inline("datetime()")
					</span> is a scalar function in SQLite that returns the current date and time.
				</p>
				<p>
					SQLite and most other database engines will publish 
					<span>
						@c.Outlink("https://www.sqlite.org/lang_corefunc.html", "documentation")
					</span> on built-in functions available to use.
				</p>
			</div>
			@e.Run("functions_date.sql")
			<div>
				Functions can operate on row results and be combined and nested as long as the data types of the inputs and outputs are all compatible.
			</div>
			@e.Run("functions_nested.sql")
			<div>
				Functions can be called in almost any part of a SQL statement.
			</div>
			@e.Run("statement_parts.sql")
			<div>
				It is important to consider 
				<span>
					@c.Inline("NULL")
				</span> input values in functions and understand how they are interpreted. For example the 
				<span>
					@c.Inline("length()")
				</span> function in SQLite returns 
				<span>
					@c.Inline("NULL")
				</span>, not
				<span>
					@c.Inline("0")
				</span>.
			</div>
			@e.Run("functions_null.sql")
			<div class="linkable" id="coalesce">
				<span>
					@c.Inline("coalesce()")
				</span> is a commonly used function to handle 
				<span>
					@c.Inline("NULL")
				</span> values by returning a "default" value if the input you supply evaluates to 
				<span>
					@c.Inline("NULL")
				</span>.
			</div>
			@e.Run("functions_coalesce.sql")
			<div>
				<p>
					Some functions are capable of accepting a variable amount of arguments. These are called <i>variadic functions</i>.
				</p>
				<p>
					A common example are string formatting functions like 
					<span>
						@c.Inline("printf()")
					</span> (or 
					<span>
						@c.Inline("format()")
					</span>). They often take in a "template" string that describes how you want the output string to be formatted, then any number of arguments that supply the data to fill it in with.
				</p>
				<p>
					In this case, 
					<span>
						@c.Inline("'%s'")
					</span> means we want a string type to appear in that spot, and 
					<span>
						@c.Inline("'%.2f'")
					</span> means we want a floating-point number rounded to two deicmal places to appear in that spot.
				</p>
				<p>
					A fun fact is that this is such a common problem to solve that most programming languages have 
					<span>
						@c.Inline("printf()")
					</span> or some similar form of it.
				</p>
			</div>
			@e.Run("functions_variadic.sql")
			<div>
				<p>
					Some database engines support creating custom functions using the 
					<span>
						@c.Inline("CREATE FUNCTION")
					</span>) statement. Others, like SQLite require you to define custom functions outside of the database and load them separately which we will not cover here.
				</p>
				<p>
					This example gives an idea of what a user-defined/custom function would typically look like in PostgreSQL, a different database engine, so ignore the syntax differences. This function could then be used anywhere a built-in function can be used by calling 
					<span>
						@c.Inline("format_transaction(...)")
					</span>.
				</p>
			</div>
			@e.Display("functions_user_defined.sql")
		</div>
	}
}
