package topics

import (
	"github.com/soikes/moreplease/pkg/component"
	"github.com/soikes/moreplease/pkg/db"
	"github.com/soikes/moreplease/sites/sql/render"
	"github.com/soikes/moreplease/sites/sql/site"
	sqlc "github.com/soikes/moreplease/sites/sql/templates/components"
	"github.com/soikes/moreplease/sites/sql/topics/statements"
	c "github.com/soikes/moreplease/templates/components"
)

func init() {
	p := site.MSP.Page(site.FunctionsPage)
	t := Functions{
		Topic: sqlc.Topic{
			Page: p,
			Config: db.Config{
				SQLFiles:   statements.MustSub(string(p.ID)),
				SchemaPath: "schema/schema.sql",
			},
			TableNames: []string{"users", "transactions"},
		},
	}
	render.Registry.MustRegisterComponent(p.ID.Asset(), component.NoOptions(t.TopicView()))
	render.Registry.MustRegisterComponent(p.ID.SchemaAsset(), component.NoOptions(t.SchemaView()))
}

type Functions struct {
	sqlc.Topic
}

templ (t Functions) TopicView() {
	{{
		e := sqlc.Example{Config: t.Config}
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@sqlc.Topic{Page: t.Page}.Component() {
		@schema.Component()
		<div class="content__two-column">
			<div>
				<p>
					Most relational database engines support the ability to create and call functions as part of a SQL statement. Most also have commonly used utility functions already built-in.
				</p>
				<p>
					Functions that accept zero or more input values and produce a single output value per row are called "simple" or "scalar" functions. There are other types of functions that work with more than one row at a time and they are generally grouped into 
					<span>
						@c.Link(site.MSP.Page(site.AggregateFunctionsPage), "")
					</span> and 
					<span>
						@c.Link(site.MSP.Page(site.WindowFunctionsPage), "")
					</span><span>.</span>
				</p>
				<p>
					<span>
						@c.InlineSQL("datetime()")
					</span> is a scalar function in SQLite that returns the current date and time.
				</p>
				<p>
					SQLite and most other database engines will publish 
					<span>
						@c.Outlink("https://www.sqlite.org/lang_corefunc.html", "documentation")
					</span> on built-in functions available to use.
				</p>
			</div>
			@e.Run("functions_date.sql")
			<div>
				Functions can operate on row results and be combined and nested as long as the data types of the inputs and outputs are all compatible.
			</div>
			@e.Run("functions_nested.sql")
			<div>
				Functions can be called in almost any part of a SQL statement.
			</div>
			@e.Run("statement_parts.sql")
			<div>
				It is important to consider 
				<span>
					@c.InlineSQL("NULL")
				</span> input values in functions and understand how they are interpreted. For example the 
				<span>
					@c.InlineSQL("length()")
				</span> function in SQLite returns 
				<span>
					@c.InlineSQL("NULL")
				</span>, not
				<span>
					@c.InlineSQL("0")
				</span><span>.</span>
			</div>
			@e.Run("functions_null.sql")
			<div class="linkable" id="coalesce">
				<span>
					@c.InlineSQL("coalesce()")
				</span> is a commonly used function to handle 
				<span>
					@c.InlineSQL("NULL")
				</span> values by returning a "default" value if the input you supply evaluates to 
				<span>
					@c.InlineSQL("NULL")
				</span><span>.</span>
			</div>
			@e.Run("functions_coalesce.sql")
			<div>
				<p>
					Some functions are capable of accepting a variable amount of arguments. These are called <i>variadic functions</i>.
				</p>
				<p>
					A common example are string formatting functions like 
					<span>
						@c.InlineSQL("printf()")
					</span> (or 
					<span>
						@c.InlineSQL("format()")
					</span>). They often take in a "template" string that describes how you want the output string to be formatted, then any number of arguments that supply the data to fill it in with.
				</p>
				<p>
					In this case, 
					<span>
						@c.InlineSQL("'%s'")
					</span> means we want a string type to appear in that spot, and 
					<span>
						@c.InlineSQL("'%.2f'")
					</span> means we want a floating-point number rounded to two deicmal places to appear in that spot.
				</p>
				<p>
					A fun fact is that this is such a common problem to solve that most programming languages have 
					<span>
						@c.InlineSQL("printf()")
					</span> or some similar form of it.
				</p>
			</div>
			@e.Run("functions_variadic.sql")
			<div>
				<p>
					Some database engines support creating custom functions using the 
					<span>
						@c.InlineSQL("CREATE FUNCTION")
					</span>) statement. Others, like SQLite require you to define custom functions outside of the database and load them separately which we will not cover here.
				</p>
				<p>
					This example gives an idea of what a user-defined/custom function would typically look like in PostgreSQL, a different database engine, so ignore the syntax differences. This function could then be used anywhere a built-in function can be used by calling 
					<span>
						@c.InlineSQL("format_transaction(...)")
					</span><span>.</span>
				</p>
			</div>
			@e.Display("functions_user_defined.sql")
		</div>
	}
}

templ (t Functions) SchemaView() {
	{{
		schema := sqlc.Schema{Page: t.Page, Config: t.Config, TableNames: t.TableNames}
	}}
	@schema.StandaloneSchema()
}
