package select_query

import (
    "embed"

    "soikke.li/moreplease/templates"
    "soikke.li/moreplease/sites/sql/db"
    st "soikke.li/moreplease/sites/sql/templates"
)

//go:embed sql
var sqlFiles embed.FS

templ Example() {
    {{
        s := db.Statements{
            Files: sqlFiles,
            SchemaPath: "sql/schema/schema.sql",
        }
        e := st.Example{
            Statements: s,
        }
    }}
    @templates.Base("More SQL Please: SELECT") {
        <div class="content wide">
            @st.TopicTitle("SELECT")
            @st.Schema(s, "users")
            <div class="container">
                <div>
                    A <span>@st.Inline("SELECT")</span> statement is a read-only query used to retrieve data from a table. It's typically the most commonly used query.
                </div>
                @e.Run("sql/select.sql")
                <div>
                    You can specify individual columns to retrieve, or <span>@st.Inline("*")</span> to retrieve all columns.
                </div>
                @e.Run("sql/select_all.sql")
                <div>
                    Some database engines allow you to concatenate multiple columns into one. In the case of SQLite, <span>@st.Inline("||")</span> is used. Other engines may use <span>@st.Inline("+")</span>, and most engines include a <span>@st.Inline("CONCAT()")</span> function which serves the same purpose. Here we concatenate first and last name with a space in between. Single quotes are used to begin and end strings in SQL.
                </div>
                @e.Run("sql/select_concat.sql")
                <div>
                    The column name returned above is difficult to read. The keyword <span>@st.Inline("AS")</span> can be used to alias columns with any custom name.
                </div>
                @e.Run("sql/select_as.sql")
                <div>
                    If you want to alias a column with a name that includes spaces, surround the name with double quotation marks.
                </div>
                @e.Run("sql/select_as_pretty.sql")
                <div>
                    <span>@st.Inline("SELECT DISTINCT")</span> can be used when you want to return only unique values. Notice how in the example the last name "Amini" appears once where previous examples included both people with the same last name.
                </div>
                @e.Run("sql/select_distinct.sql")
                <div>
                    Some database engines allow a <span>@st.Inline("SELECT")</span> clause without a table to allow you to include arbitrary computations in your results. This can be useful as a test query, or when using a <a href="case"><span>@st.Inline("CASE")</span></a> statement.
                </div>
                @e.Run("sql/select_computation.sql")
            </div>
        </div>
    }
}
