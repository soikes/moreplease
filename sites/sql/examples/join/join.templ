package where_query

import "soikke.li/moreplease/templates"
import "soikke.li/moreplease/sites/sql/highlight"
import "soikke.li/moreplease/sites/sql/db"
import "embed"

//go:embed sql/*.sql
var sources embed.FS

//TODO: Change rendering to use classes so we don't flood the page with inline styles.
templ Example() {
    {{ s := db.Statements{Sources: sources} }}
    @templates.Base("More SQL Please: JOIN") {
        <div class="content wide">
            <div class="title">
                <h1 class="example-title"><a href="/" class="home">More SQL Please</a>: <span class="title-em">JOIN</span></h1>
            </div>
            <details class="toggle">
                <summary class="action" data-open="hide tables" data-close="show tables"></summary>
                <div class="container tables">
                    <div class="tile">
                        <div class="tablename"><span>@templ.Raw(highlight.Inline("users"))</span></div>
                        <pre>
                            { s.Exec("sql/dump_users.sql") }
                        </pre>
                    </div>
                    <div class="tile">
                        <div class="tablename"><span>@templ.Raw(highlight.Inline("donations"))</span></div>
                        <pre>
                            { s.Exec("sql/dump_donations.sql") }
                        </pre>
                    </div>
                </div>
            </details>
            <div class="container">
                <div class="block">
                    A <span class="inline-code">@templ.Raw(highlight.Inline("JOIN"))</span> clause can be added to statements to combine results from multiple tables based on a relationship between them.<br><br>
                    In this example there are two tables: <span class="inline-code">@templ.Raw(highlight.Inline("users"))</span> and <span class="inline-code">@templ.Raw(highlight.Inline("donations"))</span>. Notice the donations table has a <span class="inline-code">@templ.Raw(highlight.Inline("user_id"))</span> column to indicate which user made that donation.<br><br>
                    In the query you first specify the names of all the columns to retrieve. Prefixing the columns with table names is not required unless two tables have the same column name but it's good practice to be able to easily see which columns come from which table.<br><br>
                    Next, specify the first table to query like a regular <span class="inline-code">@templ.Raw(highlight.Inline("SELECT"))</span>.<br><br>
                    Then you specify which type of <span class="inline-code">@templ.Raw(highlight.Inline("JOIN"))</span> to use on the other table. In this case, the type is an <span class="inline-code">@templ.Raw(highlight.Inline("INNER JOIN"))</span> which means that the query will only return rows that have a match in both tables. Notice how Priya has not made a donation yet so she is not included in the results.<br><br>
                    The <span class="inline-code">@templ.Raw(highlight.Inline("ON"))</span> clause is where you specify the relationship between the tables that you want the tables to be joined on. The types of these columns need to match.<br><br>
                    As an aside, designing tables and data models with relationships that make sense is a valuable skill and can become challenging with many tables.
                </div>
                <div class="sticky-container">
                    <div class="block tile sticky">
                        @templ.Raw(highlight.Block(sources,
                            "sql/join.sql"))
                        <div>
                            <pre>
                                { s.Exec("sql/join.sql") }
                            </pre>
                        </div>
                    </div>
                </div>
                <div class="block">
                    A <span class="inline-code">@templ.Raw(highlight.Inline("LEFT JOIN"))</span> can be used when you want to retrieve all of the rows from the first (left) table combined with only rows that match from the second (right) table. Rows from the left table that do not match anything in the right table will return <span class="inline-code">@templ.Raw(highlight.Inline("NULL"))</span> in place of a donation amount.<br><br>
                    This type of <span class="inline-code">@templ.Raw(highlight.Inline("JOIN"))</span> is useful when you are not sure if there will be a match for all the rows in your first table but you want to include them in your result.<br><br>
                    In this example we can now see in the results who has and who has not donated.
                </div>
                <div class="sticky-container">
                    <div class="block tile sticky">
                        @templ.Raw(highlight.Block(sources,
                            "sql/left_join.sql"))
                        <div>
                            <pre>
                                { s.Exec("sql/left_join.sql") }
                            </pre>
                        </div>
                    </div>
                </div>
                <div class="block">
                    But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?
                    But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?
                </div>
            </div>
        </div>
    }
}

/*
"sql/select_all_columns.sql",
"sql/select_alias.sql",
"sql/select_computation.sql",
*/
